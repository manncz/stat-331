---
title: "Simulation"
format: 
  revealjs:
    html-math-method: mathjax
    theme: [default, ../slide_custom.scss]
    auto-stretch: false
editor: source
embed-resources: true
self-contained-math: true
execute:
  echo: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
```

## Wednesday, March 5th

Today we will...

+ New Material
  + Statistical Distributions
  + Simulating Data
+ Work Time
  + PA 9.2: Instrument Con
  + LA 9: Simulation Exploration
  + PC4: Linear Regression


# Statistical Distributions


## Statistical Distributions

Recall from your statistics classes...

::: panel-tabset

### Random Variable

A **random variable** is a value we don't know until we observe an **instance**.

+ Coin flip:  could be heads (0) or tails (1)
+ Person's height:  could be anything from 0 feet to 10 feet.
+ Annual income of a US worker:  could be anything from $0 to $1.6 billion

### Distribution

The **distribution** of a random variable tells us its **possible values** and **how likely they are**.

:::: {.columns}
::: {.column width=73%}
+ Coin flip: 50% chance of heads and tails.
+ Heights follow a bell curve centered at 5 foot 7.
+ Most American workers make under $100,000.
:::
::: {.column width=27%}
![](images/dist.png)
:::
::::
:::


## Statistical Distributions with Names!

::: panel-tabset

### `unif`

**Uniform Distribution**

:::: columns
::: column
+ When you know the **range** of values, but not much else.
+ All values in the range are **equally likely** to occur.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = runif(1000))

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun=dunif, col = "cornflowerblue", lwd = 2) +
  theme_classic()
```
:::
::::
### `norm`

**Normal Distribution**

:::: columns
::: column
+ When you expect values to fall **near the center**.
+ Frequency of values follows a **bell shaped curve**.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = rnorm(1000))

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun=dnorm, col = "cornflowerblue", lwd = 2) +
  theme_classic()
```
:::
::::
### `t`

**t-Distribution**

:::: columns
::: column
+ A slightly **wider** bell curve.
+ Basically used in the same context as the **normal distribution**, but more common with  real data (when the *standard deviation* is unknown).
:::
::: column
```{r}
#| out-width: 100%
#| echo: false

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun= function(x) dt(x, df = 5), col = "cornflowerblue", lwd = 2) +
  stat_function(fun = dnorm, col = "indianred", lwd = 1) +
  theme_classic()
```
:::
::::
### `chisq`

**Chi-Square Distribution**

:::: columns
::: column
+ Somewhat **skewed**, and only allows values **above zero**.
+ Used in testing **count data**.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = rchisq(1000, df = 5))

ggplot(my_samples, aes(x)) + 
  geom_histogram(bins = 40, aes(y = ..density..), fill = "grey", col = "white") + 
  stat_function(fun= function(x) dchisq(x, df = 5), col = "cornflowerblue", lwd = 2) +
  theme_classic()
```
:::
::::

### `binom`

**Binomial Distribution**

:::: columns
::: column
+ Appears when you have **two possible outcomes**, and you are **counting** how many times each outcome occurred.
:::
::: column
```{r}
#| out-width: 100%
#| echo: false
my_samples <- data.frame(x = rbinom(1000, 10, .8))

ggplot(my_samples, aes(x)) + 
  geom_bar(fill = "grey", col = "white") + 
  theme_classic()
```
:::
::::
:::


## How do we use distributions?

+ Find the **probability** of an **event**.
  + If I flip 10 coins, what are the chances I get all heads?

+ Estimate a **proportion** of a **population**.
  + About what proportion of people are above 6 feet tall?
  
+ Quantify the **evidence** in your **data**.
  + In my survey of 100 people, 67 said they were voting for Measure A.  How confident am I that Measure A will pass?


## Distribution Functions in R

::: panel-tabset
### `r`

`r` is for **random sampling**.

+ Generate random values from a distribution.
+ We use this to **simulate** data (create pretend observations).

:::: columns
::: column
```{r}
runif(n = 3, min = 10, max = 20)
rnorm(n = 3)
rnorm(n = 3, mean = -100, sd = 50)
```
:::
::: column

```{r}
rt(n = 3, df = 11)
rbinom(n = 3, size = 10, prob = 0.7)
rchisq(n = 3, df = 11)
```
:::
::::

### `p`

`p` is for **probability**.

+ Compute the chances of observing a value less than `x`.
+ We use this for calculating **p-values**.

:::: {.columns}
::: {.column width=45%}
```{r}
pnorm(q = 1.5)
pnorm(q = 70, mean = 67, sd = 3)
```
:::
::: {.column width=55%}
```{r}
1 - pnorm(q = 70, mean = 67, sd = 3)
pnorm(q = 70, mean = 67, sd = 3, lower.tail = FALSE)
```
:::
::::

### `q`

`q` is for **quantile**.

+ Given a probability $p$, compute $x$ such that $P(X < x) = p$.
+ The `q` functions are "backwards" of the `p` functions.

```{r}
qnorm(p = 0.95)
qnorm(p = 0.95, mean = 67, sd = 3)
```

### `d`

`d` is for **density**.

+ Compute the *height* of a distribution curve at a given $x$.
+ For **discrete** dist: probability of getting **exactly** $x$.
+ For **continuous** dist: usually meaningless.

Probability of *exactly* 12 heads in 20 coin tosses, with a 70% chance of tails?

```{r}
dbinom(x = 12, size = 20, prob = 0.3)
```

:::


## Empirical vs. Theoretical Distributions

```{r}
#| echo: false
set.seed(435)
data <- tibble(names   = charlatan::ch_name(1000),
        height  = rnorm(1000, mean = 67, sd = 3),
        age     = runif(1000, min = 15, max = 75),
        measure = rbinom(1000, size = 1, prob = 0.6)) |> 
  mutate(supports_measure_A = ifelse(measure == 1, "yes", "no"))
```


::: panel-tabset
### Empirical Distribution

Empirical: the observed data.

```{r}
#| fig-align: center
#| out-width: 60%
#| code-fold: true
data %>%
  ggplot(aes(x = height)) +
  geom_histogram(aes(y = ..density..), bins = 10, color = "white") 
```

### Theoretical Distributions

Theoretical: the distribution curve.

```{r}
#| fig-align: center
#| out-width: 60%
#| code-fold: true
data %>%
  ggplot(aes(x = height)) +
  stat_function(fun = ~dnorm(.x, mean = 67, sd = 3),
                col = "steelblue", lwd = 2) +
  stat_function(fun = ~dnorm(.x, mean = 67, sd = 2),
                col = "orange2", lwd = 2)
```
:::


## Plotting Both Distributions

::: panel-tabset

### <font size = 6> `geom_histogram` </font>

:::: {.columns}
::: {.column width=76%}
```{r hist}
#| code-line-numbers: "3"
#| fig-align: center
#| out-width: 80%
data |> 
  ggplot(aes(x = height)) +
  geom_histogram(bins = 10, color = "white")
```
:::
::: {.column width=24%}
1. Plot your data.
:::
::::

### <font size = 6> `dnorm` </font>
:::: {.columns}
::: {.column width=76%}
```{r}
#| code-line-numbers: "4"
#| fig-align: center
#| out-width: 80%
data |> 
  ggplot(aes(x = height)) +
  geom_histogram(bins = 10, color = "white") +
  stat_function(fun = ~ dnorm(.x, mean = 67, sd = 3),
                color = "steelblue", lwd = 2)
```
:::
::: {.column width=24%}
2. Add a density curve.
:::
::::

### <font size = 6> `..density..` </font>

:::: {.columns}
::: {.column width=76%}
```{r}
#| code-line-numbers: "3"
#| fig-align: center
#| out-width: 80%
data |> 
  ggplot(aes(x = height)) +
  geom_histogram(aes(y = ..density..),
                 bins = 10, color = "white") +
  stat_function(fun = ~ dnorm(.x, mean = 67, sd = 3),
                color = "steelblue", lwd = 2)
```
:::
::: {.column width=24%}
3. Change the y-axis of the histogram to match the y-axis of the density.
:::
::::

:::

# Simulating Data


## Simulate a Dataset

::: panel-tabset

### The Idea

We can generate fake data based on the assumption that a variable follows a certain distribution.

+ We randomly sample observations from the distribution.

```{r}
age <- runif(1000, min = 15, max = 75)
```


### `set.seed()`

Since there is randomness involved, we will get a different result each time we run the code.

:::: {.columns}
::: {.column width=50%}
```{r}
runif(3, min = 15, max = 75)
```
:::
::: {.column width=50%}
```{r}
runif(3, min = 15, max = 75)
```
:::
::::

To make a **reproducible** random sample, we first **set the seed**:

:::: {.columns}
::: {.column width=50%}
```{r}
set.seed(94301)
runif(3, min = 15, max = 75)
```
:::
::: {.column width=50%}
```{r}
set.seed(94301)
runif(3, min = 15, max = 75)
```
:::
::::

### `tibble`
```{r}
#| code-line-numbers: "3-5" 
set.seed(435)
fake_data <- tibble(names   = charlatan::ch_name(1000),
        height  = rnorm(1000, mean = 67, sd = 3),
        age     = runif(1000, min = 15, max = 75),
        measure = rbinom(1000, size = 1, prob = 0.6)) |> 
  mutate(supports_measure_A = ifelse(measure == 1, "yes", "no"))
head(fake_data)
```

### visualize

Check to see the ages look uniformly distributed.

```{r}
#| code-fold: true
#| fig-align: center
#| out-width: 60%
fake_data |> 
  ggplot(aes( x = age,
             fill = supports_measure_A)) +
  geom_histogram(show.legend = F) +
  facet_wrap(~ supports_measure_A,
             ncol = 1) +
  scale_fill_brewer(palette = "Paired") +
  theme_bw() +
  labs(x = "Age (years)",
       y = "",
       subtitle = "Support for Measure A",)
```

:::


## Simulate Multiple Datasets

::: panel-tabset

### Function

Write a function to simulate height data from a population with some mean and SD height.

```{r}
ht_func <- function(n = 200, avg, std){
  tibble(person = 1:n,
         ht = rnorm(n = n, mean = avg, sd = std))
}

ht_func(n = 5, avg = 66, std = 3)
```

### Parameters

Create a mean and SD height for each population.

```{r}
expand_grid(mean_ht = seq(from = 60, to = 78, by = 6),
            std_ht  = c(3, 6))
```

### Simulate

Simulate datasets with different mean and SD heights.

```{r}
#| code-fold: true
expand_grid(mean_ht = seq(from = 60, to = 78, by = 6),
            std_ht  = c(3, 6)) |> 
  mutate(ht_data = pmap(list(avg = mean_ht,
                             std  = std_ht),
                        ht_func)) |>
  unnest(cols = ht_data) |> 
  head()
```

### Plot

Consider the samples simulated from each population.

```{r}
#| echo: false
fake_ht_data <- expand_grid(mean_ht = seq(from = 60, to = 78, by = 6),
                          std_ht  = c(3, 6)) |> 
  mutate(ht_data = pmap(list(avg = mean_ht,
                             std  = std_ht),
                        ht_func)) |>
  unnest(cols = c(ht_data))
```

```{r}
#| code-fold: true
#| fig-width: 8
#| fig-height: 4
#| fig-align: center
fake_ht_data |> 
  ggplot(aes(x = ht)) +
  geom_histogram(color = "white") +
  facet_grid(std_ht ~ mean_ht) +
  labs(x = "Height (in)",
       y = "",
       subtitle = "Frequency",
       title = "Simulated Height Data from 8 Populations")
```
:::

## Draw a Random Sample

Use `sample()` to take a random sample of values from a vector.

```{r}
my_vec <- c("dog", "cat", "bunny", "horse", "goat", "chicken")

sample(x = my_vec, size = 3)

set.seed(1)
sample(x = my_vec, size = 5, replace = T)
```


## Draw a Random Sample

Use `sample_n()` to take a random sample of observations (rows) from a dataset.

```{r}
fake_data |> 
  sample_n(size = 3)
```


## Example: Birthday Simulation

Suppose there is a group of 50 people.

+ Simulate the approximate probability that at least two people have the same birthday (same day of the year, not considering year of birth or leap years).


## Example: Birthday Simulation

Write a function to ...

+ ... simulate the birthdays of 50 people.
+ ... count how many birthdays are shared.
+ ... return whether or not a shared birthday exists.

```{r}
bDays <- function(n = 50){
  bday_data <- tibble(person = 1:n,
                      bday   = sample(1:365, size = n, replace = T))
  
  double_bdays <- bday_data |> 
    count(bday) |> 
    filter(n >= 2) |> 
    nrow()
  
  return(double_bdays > 0)
}
```


## Example: Birthday Simulation

Use a `map()` function to simulate 1000 datasets.

+ What proportion of these datasets contain at least two people with the same birthday?

```{r}
sim_results <- map_lgl(.x = 1:1000,
                       .f = ~ bDays(n = 50))

sum(sim_results)/1000
```


## In-line Code

We can automatically include code output in the written portion of a Quarto document using `` `r ` ``.

+ This ensures reproducibility when you have results from a random generation process.

```{r}
my_rand <- rnorm(1, mean = 0, sd = 1)
my_rand
```

Type this: `` My random number is `r knitr::inline_expr("my_rand")`. ``

To get this: My random number is `r my_rand`.


## PA 9.2: Instrument Con

:::{columns}
:::{.column width=50%}
Work with statistical distributions to determine if an instrument salesman is lying.
:::
:::{.column width=50%}
![](images/The_Music_Man_poster_1957.jpg)
:::
:::

## Lab 9: Simulation Exploration




## To do...

+ **PC4: Linear Regression**
  + Due Friday 3/7 at 11:59pm.

+ **PA 9.2: Instrument Con**
  + Due Saturday, 3/8 at 11:59pm.

+ **Lab 9: Simulation Exploration**
  + Due Saturday, 3/8 at 11:59pm.

+ Read **Chapter 10** and complete **Check-in 10.1**.
  + Due Monday, 3/10 at 10:00am.


